import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
} from 'react-native';
import { Button } from './Button';
import { Card } from './Card';
import { AdminDashboard } from '../../screens/dashboard/AdminDashboard';
import { PastorDashboard } from '../../screens/dashboard/PastorDashboard';
import { MemberDashboard } from '../../screens/dashboard/MemberDashboard';
import { Colors, Typography, Spacing } from './design-system';

type DashboardScreenType = 'admin' | 'pastor' | 'member' | null;

export const DashboardScreensTest: React.FC = () => {
  const [currentScreen, setCurrentScreen] = useState<DashboardScreenType>(null);

  const handleNavigateToMembers = () => {
    console.log('ðŸ”„ Navegando para Membros');
  };

  const handleNavigateToDonations = () => {
    console.log('ðŸ”„ Navegando para DoaÃ§Ãµes');
  };

  const handleNavigateToReports = () => {
    console.log('ðŸ”„ Navegando para RelatÃ³rios');
  };

  const handleNavigateToMinistries = () => {
    console.log('ðŸ”„ Navegando para MinistÃ©rios');
  };

  const handleNavigateToSettings = () => {
    console.log('ðŸ”„ Navegando para ConfiguraÃ§Ãµes');
  };

  const handleNavigateToMyDonations = () => {
    console.log('ðŸ”„ Navegando para Minhas DoaÃ§Ãµes');
  };

  const handleNavigateToMyProfile = () => {
    console.log('ðŸ”„ Navegando para Meu Perfil');
  };

  const handleNavigateToEvents = () => {
    console.log('ðŸ”„ Navegando para Eventos');
  };

  const handleLogout = () => {
    console.log('ðŸšª Logout realizado');
    setCurrentScreen(null);
  };

  if (currentScreen === 'admin') {
    return (
      <AdminDashboard
        onNavigateToMembers={handleNavigateToMembers}
        onNavigateToDonations={handleNavigateToDonations}
        onNavigateToReports={handleNavigateToReports}
        onNavigateToSettings={handleNavigateToSettings}
        onLogout={handleLogout}
      />
    );
  }

  if (currentScreen === 'pastor') {
    return (
      <PastorDashboard
        onNavigateToMembers={handleNavigateToMembers}
        onNavigateToDonations={handleNavigateToDonations}
        onNavigateToMinistries={handleNavigateToMinistries}
        onNavigateToSettings={handleNavigateToSettings}
        onLogout={handleLogout}
      />
    );
  }

  if (currentScreen === 'member') {
    return (
      <MemberDashboard
        onNavigateToMyDonations={handleNavigateToMyDonations}
        onNavigateToMyProfile={handleNavigateToMyProfile}
        onNavigateToEvents={handleNavigateToEvents}
        onNavigateToSettings={handleNavigateToSettings}
        onLogout={handleLogout}
      />
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <View style={styles.content}>
          <Text style={styles.title}>ðŸ§ª Dashboard Screens Test</Text>
          <Text style={styles.subtitle}>
            Teste as telas de dashboard da Igreja Oliveira
          </Text>

          <Card variant="elevated" style={styles.card}>
            <Text style={styles.cardTitle}>Dashboards por Hierarquia</Text>
            <Text style={styles.cardDescription}>
              Selecione um dashboard para testar a interface especÃ­fica de cada role
            </Text>

            <View style={styles.buttonContainer}>
              <Button
                title="ðŸ‘‘ Admin Dashboard"
                onPress={() => setCurrentScreen('admin')}
                variant="primary"
                style={styles.testButton}
              />

              <Button
                title="â›ª Pastor Dashboard"
                onPress={() => setCurrentScreen('pastor')}
                variant="secondary"
                style={styles.testButton}
              />

              <Button
                title="ðŸ‘¤ Member Dashboard"
                onPress={() => setCurrentScreen('member')}
                variant="outline"
                style={styles.testButton}
              />
            </View>
          </Card>

          <Card variant="outlined" style={styles.infoCard}>
            <Text style={styles.infoTitle}>ðŸ“‹ Funcionalidades Testadas</Text>
            <Text style={styles.infoText}>
              âœ… Design System aplicado{'\n'}
              âœ… MÃ©tricas personalizadas por role{'\n'}
              âœ… Cards de estatÃ­sticas{'\n'}
              âœ… Atividades recentes{'\n'}
              âœ… AÃ§Ãµes rÃ¡pidas{'\n'}
              âœ… NavegaÃ§Ã£o entre seÃ§Ãµes{'\n'}
              âœ… Responsividade mobile
            </Text>
          </Card>

          <Card variant="outlined" style={styles.infoCard}>
            <Text style={styles.infoTitle}>ðŸŽ¯ CaracterÃ­sticas por Dashboard</Text>
            <Text style={styles.infoText}>
              <Text style={styles.bold}>ðŸ‘‘ Admin:</Text> VisÃ£o geral completa, todas as mÃ©tricas{'\n'}
              <Text style={styles.bold}>â›ª Pastor:</Text> Foco em ministÃ©rios e dÃ­zimos{'\n'}
              <Text style={styles.bold}>ðŸ‘¤ Member:</Text> Dados pessoais e doaÃ§Ãµes prÃ³prias
            </Text>
          </Card>

          <Card variant="outlined" style={styles.infoCard}>
            <Text style={styles.infoTitle}>ðŸ”§ PrÃ³ximos Passos</Text>
            <Text style={styles.infoText}>
              â€¢ IntegraÃ§Ã£o com dados reais do Supabase{'\n'}
              â€¢ ImplementaÃ§Ã£o de Context API{'\n'}
              â€¢ NavegaÃ§Ã£o com React Navigation{'\n'}
              â€¢ Testes unitÃ¡rios{'\n'}
              â€¢ GrÃ¡ficos e visualizaÃ§Ãµes
            </Text>
          </Card>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.lightGray,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: Spacing.lg,
  },
  title: {
    fontSize: Typography.fontSize2xl,
    fontWeight: Typography.fontWeightBold,
    color: Colors.black,
    textAlign: 'center',
    marginBottom: Spacing.sm,
  },
  subtitle: {
    fontSize: Typography.fontSizeBase,
    color: Colors.gray,
    textAlign: 'center',
    marginBottom: Spacing.xl,
  },
  card: {
    marginBottom: Spacing.lg,
  },
  cardTitle: {
    fontSize: Typography.fontSizeLg,
    fontWeight: Typography.fontWeightSemibold,
    color: Colors.black,
    marginBottom: Spacing.sm,
  },
  cardDescription: {
    fontSize: Typography.fontSizeBase,
    color: Colors.gray,
    marginBottom: Spacing.lg,
    lineHeight: 22,
  },
  buttonContainer: {
    gap: Spacing.md,
  },
  testButton: {
    marginBottom: Spacing.sm,
  },
  infoCard: {
    marginBottom: Spacing.lg,
  },
  infoTitle: {
    fontSize: Typography.fontSizeBase,
    fontWeight: Typography.fontWeightSemibold,
    color: Colors.black,
    marginBottom: Spacing.sm,
  },
  infoText: {
    fontSize: Typography.fontSizeSm,
    color: Colors.gray,
    lineHeight: 20,
  },
  bold: {
    fontWeight: Typography.fontWeightSemibold,
    color: Colors.black,
  },
}); 